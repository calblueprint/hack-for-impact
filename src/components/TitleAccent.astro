---
interface Props {
  words: string[];
}

const { words } = Astro.props;

const longestWord = words.reduce((prev, curr) =>
  curr.length > prev.length ? curr : prev,
);
---

<div class="container">
  <h1 class="ghost">{longestWord}</h1>
  <div class="window">
    <div class="scroll">
      {
        words.map(w => (
          <div class="word">
            <h1 class="accent-1">{w}</h1>
            <h1 class="accent-2">{w}</h1>
          </div>
        ))
      }
      <div class="word">
        <h1 class="accent-1">{words[0]}</h1>
        <h1 class="accent-2">{words[0]}</h1>
      </div>
    </div>
  </div>
</div>

<style lang="scss">
  @use '../styles/colors';

  // manually defined (can't use CSS vars in @for)
  // should be one more than available words
  $numWords: 5;

  // setting up spacing
  .container {
    position: relative;
    display: inline-block;
  }

  .ghost {
    visibility: hidden;
    font-size: clamp(1.25rem, 4vw, 3.25rem);
  }

  // window
  .window {
    position: absolute;
    width: 100%;
    height: 100%;
    overflow-y: hidden;
    top: 0;
  }

  // scroll container
  .scroll {
    position: absolute;
    top: 0;
    left: 0;
    display: inline-flex;
    flex-direction: column;
    animation: scrollUp 5s infinite;
  }

  // each word
  .word {
    position: relative;

    h1 {
      mix-blend-mode: multiply;
      text-align: center;
      width: 100%;
      font-size: clamp(1.25rem, 4vw, 3.25rem);

      &.accent-1 {
        color: colors.$accent-red;
      }

      &.accent-2 {
        position: absolute;
        top: -2px;
        left: -1px;
        color: colors.$accent-yellow;
        z-index: -1;
      }
    }
  }

  // animation
  // kudos to https://1stwebdesigner.com/10-cool-pure-css-scrolling-text-animations/
  @keyframes scrollUp {
    @for $i from 1 through ($numWords - 1) {
      #{($i * 25) - 10%},
      #{$i * 25%} {
        transform: translateY(calc(-100% / $numWords) * $i);
      }
    }
  }
</style>
